# Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        return self.mergeTwoLists1(l1, l2)
    
    def mergeTwoLists1(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        if not l1:
            return l2
        elif not l2:
            return l1
        else:
            p1 = l1 if l1.val < l2.val else l2
            p2 = l2 if l1.val < l2.val else l1

            p3 = p1
            p1 = p1.next
            head = p3
                        
            while p1 and p2:
                print("p1: ", p1.val)
                print("p2: ", p2.val)                
                if p1.val <= p2.val:
                    p3.next = p1
                    p1 = p1.next
                else:
                    p3.next = p2
                    p2 = p2.next
                p3 = p3.next
            if not p1 and p2:
                p3.next = p2
            if not p2 and p1:
                p3.next = p1
                
            return head